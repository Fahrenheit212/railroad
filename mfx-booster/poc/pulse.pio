;
;

.program pulse

; Repeatedly get one word of data from the TX FIFO, stalling when the FIFO is
; empty. Write the least four significant bits to the OUT pin group.

pulse:
    ; auto pull is enabled so wait until data is available
    out x, 12
    out pins, 4
pulse_wait:
    jmp x-- pulse_wait
    jmp pulse

% c-sdk {
#include "hardware/clocks.h"
extern float divider;

static inline void pulse_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = pulse_program_get_default_config(offset);

    // Map the state machine's OUT pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_out_pins(&c, pin, 1);
    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    /* using 1us resolution */
    float div = (float)clock_get_hz(clk_sys) / 1000000;
    divider = div;
    sm_config_set_clkdiv(&c, div);
    /* join RX/TX FIFO -> 4 + 4 entries */
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    /* set auto pull */
    sm_config_set_out_shift(&c, true, true, 32);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}
